@startuml

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

LAYOUT_WITH_LEGEND()

title Контейнерная диаграмма (C2) — RabbitMQ

' Внешние пользователи и системы из Task1
Person(оператор, "Оператор фермы", "Сотрудник, отвечающий за мониторинг скота на ферме")
Person(дежурный, "Дежурный сотрудник", "Сотрудник, получающий уведомления при отсутствии интернета")
Person(аналитик, "Аналитик", "Сотрудник для анализа данных и отчетности")
Person(администратор, "Администратор системы", "Управление пользователями и настройками")
System_Ext(erp, "ERP система (1С:Агро)", "Существующая система учета")
System_Ext(rabbitmq_ext, "RabbitMQ (существующая)", "Брокер сообщений для интеграции")
System_Ext(bi, "BI система", "Существующая система отчетности")
System_Ext(мобильное_приложение, "Мобильное приложение", "Существующее приложение для агрономов")
System_Ext(камеры, "IP камеры", "Видеокамеры для мониторинга")
System_Ext(датчики_кормушки, "Датчики кормушек", "IoT датчики кормушек разных производителей")
System_Ext(датчики_поилки, "Датчики поилок", "IoT датчики поилок")
System_Ext(датчики_фильтрации, "Датчики фильтрации воды", "Мониторинг качества воды")
System_Ext(датчики_запасов, "Датчики запасов корма", "Мониторинг количества корма")
System_Ext(нейросеть, "Нейросетевая модель", "Готовая модель от партнеров для анализа видео")

System_Boundary(Система, "Система мониторинга скота") {
    Container(web, "Web-приложение", "React/Vue", "UI для операторов и администраторов")
    Container(api, "API Gateway", ".NET", "Единая точка входа для клиентов")
    Container(monitoring, "Сервис мониторинга", ".NET", "Обработка данных с камер и датчиков, тревоги")
    ContainerDb(monitoring_db, "БД мониторинга", "PostgreSQL", "Данные мониторинга и тревог")
    Container(control, "Сервис управления", ".NET", "Управление кормушками, поилками, исполнительными устройствами")
    ContainerDb(control_db, "БД управления", "PostgreSQL", "Данные управления устройствами")
    Container(accounting, "Сервис учёта и отчётности", ".NET", "Учёт поголовья, событий, формирование отчётов")
    ContainerDb(accounting_db, "БД учёта", "PostgreSQL", "Учёт поголовья и событий")
    Container(security, "Сервис безопасности", ".NET", "Аутентификация, авторизация, управление ролями")
    ContainerDb(security_db, "БД безопасности", "PostgreSQL", "Пользователи, роли, права")
    Container(integration, "Сервис интеграции", ".NET", "Интеграция с внешними системами, шлюзами, BI/ERP")
    ContainerDb(integration_db, "БД интеграции", "PostgreSQL", "Интеграционные данные")
    Container(queue, "RabbitMQ", "RabbitMQ", "Очередь сообщений между сервисами, поддержка MQTT для IoT")
}

' Внешние взаимодействия (из Task1)
Rel(оператор, web, "Мониторинг и управление", "Web UI")
Rel(дежурный, web, "Получение уведомлений", "SMS/Локальные уведомления")
Rel(аналитик, web, "Анализ данных", "Web UI")
Rel(администратор, web, "Управление системой", "Web UI")
Rel(api, erp, "Передача метрик", "REST API")
Rel(api, rabbitmq_ext, "Публикация событий", "AMQP/MQTT")
Rel(api, bi, "Передача данных для отчетов", "ODBC")
Rel(api, мобильное_приложение, "API для мобильного приложения", "REST API")
Rel(камеры, monitoring, "Видеопоток", "RTSP/HTTP")
Rel(датчики_кормушки, monitoring, "Данные о состоянии", "MQTT/LoRaWAN")
Rel(датчики_поилки, monitoring, "Данные о состоянии", "MQTT/LoRaWAN")
Rel(датчики_фильтрации, monitoring, "Данные о качестве воды", "MQTT/LoRaWAN")
Rel(датчики_запасов, monitoring, "Данные о количестве корма", "MQTT/LoRaWAN")
Rel_D(monitoring, api, "Асинхронная синхронизация данных", "RabbitMQ/очередь сообщений")
Rel(monitoring, нейросеть, "Анализ видео", "HTTP API")

' Внутренние взаимодействия (детализация Task2)
Rel(web, api, "REST/HTTPS")
Rel(api, monitoring, "REST/gRPC")
Rel(api, control, "REST/gRPC")
Rel(api, accounting, "REST/gRPC")
Rel(api, security, "REST/gRPC")
Rel(api, integration, "REST/gRPC")
Rel(monitoring, queue, "Публикует события", "AMQP/MQTT")
Rel(control, queue, "Потребляет команды", "AMQP/MQTT")
Rel(monitoring, monitoring_db, "Читает/пишет данные")
Rel(control, control_db, "Читает/пишет данные")
Rel(accounting, accounting_db, "Читает/пишет данные")
Rel(security, security_db, "Читает/пишет данные")
Rel(integration, integration_db, "Читает/пишет данные")
Rel(integration, queue, "Публикует/читает события", "AMQP/MQTT")
Rel(integration, bi, "Интеграция с BI/ERP", "REST/ODBC")
Rel(камеры, integration, "HTTP/MQTT через шлюз", "Данные с устройств и команды")
@enduml 